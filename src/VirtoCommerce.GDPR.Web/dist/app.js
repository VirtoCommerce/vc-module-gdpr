(()=>{var e;e="virtoCommerce.gdpr",void 0!==AppDependencies&&AppDependencies.push(e),angular.module(e,[]).config(["$stateProvider","$urlRouterProvider",function(e,t){e.state("workspace.gdpr",{url:"/GDPR",templateUrl:"$(Platform)/Scripts/common/templates/home.tpl.html",controller:["$scope","platformWebApp.bladeNavigationService",function(e,t){t.showBlade({id:"contactList",currentEntity:{id:null},controller:"virtoCommerce.gdpr.contactListController",template:"Modules/$(VirtoCommerce.GDPR)/Scripts/blades/contact-list.tpl.html",isClosingDisabled:!0})}]})}]).run(["platformWebApp.mainMenuService","platformWebApp.widgetService","$state",function(e,t,r){var i={path:"browse/GDPR",icon:"fa fa-cube",title:"GDPR",priority:100,action:function(){r.go("workspace.gdpr")},permission:"GDPR:access"};e.addMenuItem(i)}]),angular.module("virtoCommerce.gdpr").controller("virtoCommerce.gdpr.contactListController",["$scope","virtoCommerce.gdpr.webApi","platformWebApp.dialogService","platformWebApp.bladeUtils","platformWebApp.uiGridHelper","virtoCommerce.customerModule.memberTypesResolverService","platformWebApp.ui-grid.extension",function(e,t,r,i,o,a,n){e.uiGridConstants=o.uiGridConstants;var s=e.blade;s.title="gdpr.blades.contact-list.title";var l=i.bladeNavigationService;function c(e,t){return{id:e,name:t,blade:s,navigate:function(e){e.blade.disableOpenAnimation=!0,l.showBlade(e.blade),e.blade.refresh()}}}s.refresh=function(r){s.isLoading=!0;var i={memberType:s.memberType,memberId:s.currentEntity.id,keyword:d.keyword?d.keyword:void 0,deepSearch:!!d.keyword,sort:o.getSortExpression(e),skip:(e.pageSettings.currentPage-1)*e.pageSettings.itemsPerPageCount,take:e.pageSettings.itemsPerPageCount,objectType:"Member"};s.searchCriteria&&angular.extend(i,s.searchCriteria),t.search(i,(function(t){s.isLoading=!1,e.pageSettings.totalItems=t.totalCount,Array.isArray(t.results)&&t.results.length&&(_.each(t.results,(function(e){e.securityAccounts[0]?(e.email=e.securityAccounts[0].email?e.securityAccounts[0].email:"",e.userName=e.securityAccounts[0].userName?e.securityAccounts[0].userName:""):(e.email="",e.userName="")})),t.results[0].outerId||(t.results[0].outerId=null)),e.listEntries=t.results?t.results:[],function(){if(s.breadcrumbs){var e=s.breadcrumbs.slice(0);if(_.all(e,(function(e){return e.id!==s.currentEntity.id}))){var t=c(s.currentEntity.id,s.currentEntity.name);e.push(t)}s.breadcrumbs=e}else s.breadcrumbs=[c(null,"gdpr.blades.contact-list.breadcrumb-all")]}()})),r&&s.parentRefresh&&s.parentRefresh()},s.showDetailBlade=function(e,t){s.setSelectedNode(e);var i=a.resolve(e.memberType);if(i){var o=angular.copy(i.detailBlade);o.currentEntity=e,o.currentEntityId=e.id,o.isNew=t,l.showBlade(o,s)}else r.showNotificationDialog({id:"error",title:"customer.dialogs.unknown-member-type.title",message:"customer.dialogs.unknown-member-type.message",messageValues:{memberType:e.memberType}})},s.setSelectedNode=function(t){e.selectedNodeId=t.id},e.selectNode=function(e){s.setSelectedNode(e);var t=a.resolve(e.memberType);if(t&&t.knownChildrenTypes&&t.knownChildrenTypes.length){var r={id:s.id,breadcrumbs:s.breadcrumbs,subtitle:"customer.blades.member-list.subtitle",subtitleValues:{name:e.name},currentEntity:e,disableOpenAnimation:!0,controller:s.controller,template:s.template,isClosingDisabled:!0};l.showBlade(r,s.parentBlade)}else s.showDetailBlade(e)},s.headIcon="fa fa-user __customers",s.toolbarCommands=[{name:"platform.commands.refresh",icon:"fa fa-refresh",executeMethod:s.refresh,canExecuteMethod:function(){return!0}}];var d=s.filter={keyword:null};d.criteriaChanged=function(){null===d.keyword&&(s.memberType=void 0),e.pageSettings.currentPage>1?e.pageSettings.currentPage=1:s.refresh()},e.setGridOptions=function(t,r){e.gridOptions=r,n.tryExtendGridOptions(t,r),r.onRegisterApi=function(t){e.gridApi=t,t.core.on.sortChanged(e,(function(){s.isLoading||s.refresh()}))},i.initializePagination(e)}}]),angular.module("virtoCommerce.gdpr").factory("virtoCommerce.gdpr.webApi",["$resource",function(e){return e("api/contacts",{},{getByIds:{method:"GET",url:"api/contacts",isArray:!0},search:{method:"POST",url:"api/contacts/search"},update:{method:"PUT",url:"api/contacts/update"},delete:{method:"DELETE",url:"api/contacts/delete"}})}])})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,